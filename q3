#include <LPC17xx.h>

unsigned char digits[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 
                            0x6D, 0x7D, 0x07, 0x7F, 0x6F};  // 7-segment encoding

int counter = 0;  // Start from 0000
int digit_values[4] = {0, 0, 0, 0};  // BCD digits

void timer0_init(void) {
    LPC_TIM0->PR = 2;  // Prescaler = 2
    LPC_TIM0->MR0 = 1000000;  // 1-second delay (1 MHz clock)
    LPC_TIM0->MCR = (1 << 1);  // Reset on match
    LPC_TIM0->TCR = 1;  // Start Timer
}

void delay(void) {
    LPC_TIM0->TCR = 2;  // Reset Timer
    LPC_TIM0->TCR = 1;  // Start Timer
    while (!(LPC_TIM0->TC >= LPC_TIM0->MR0));  // Wait for match
}

void displayDigit(int digit, int position) {
    LPC_GPIO0->FIOCLR = 0x00003FF0;  // Clear segments
    LPC_GPIO1->FIOCLR = (15 << 23);  // Clear digit select

    LPC_GPIO0->FIOSET = (digits[digit] << 4) & 0x000007F0;  // Set digit
    LPC_GPIO1->FIOSET = (1 << (23 + position));  // Activate digit
}

void updateCounter(void) {
    if (LPC_GPIO2->FIOPIN & (1 << 12)) {  // If switch is HIGH, count UP
        if (counter < 9999) counter++;
        else counter = 0;
    } 
    else {  // If switch is LOW, count DOWN
        if (counter > 0) counter--;
        else counter = 9999;
    }

    digit_values[0] = counter % 10;
    digit_values[1] = (counter / 10) % 10;
    digit_values[2] = (counter / 100) % 10;
    digit_values[3] = (counter / 1000) % 10;
}

int main(void) {
    SystemInit();
    SystemCoreClockUpdate();

    LPC_PINCON->PINSEL0 &= 0xF0000FFF;  // Set P0.4 - P0.10 as GPIO
    LPC_PINCON->PINSEL3 &= 0xF07FFFFF;  // Set P1.23 - P1.26 as GPIO
    LPC_PINCON->PINSEL4 &= ~(3 << 24);  // Set P2.12 as GPIO

    LPC_GPIO0->FIODIR |= 0x00003FF0;  // Set P0.4 - P0.10 as output
    LPC_GPIO1->FIODIR |= (15 << 23);  // Set P1.23 - P1.26 as output
    LPC_GPIO2->FIODIR &= ~(1 << 12);  // Set P2.12 as input

    timer0_init();

    while (1) {
        displayDigit(digit_values[0], 0); delay();
        displayDigit(digit_values[1], 1); delay();
        displayDigit(digit_values[2], 2); delay();
        displayDigit(digit_values[3], 3); delay();

        updateCounter();  // Count up or down based on switch state
    }
}